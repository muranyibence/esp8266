<!--
	This application is sampling analog input A0 of ESP8266
	so it then can be displayed on-line in a web browser
	Application consist of several files
	Please check repository below for details

	Repository: https://github.com/krzychb/EspScopeA0
	Version: Charlie
	Flie: index.htm
	Revision: 0.1.1
	Date: 11-Sep-2016
	Author: krzychb at gazeta.pl

	Copyright (c) 2016 Krzysztof Budzynski. All rights reserved.

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->

<!DOCTYPE html>
<html>

<head>
	<title>EspScopeA0-Charlie 0.1.1</title>
	<link rel="stylesheet" type="text/css" href="style.css">
	<!-- get file below from http://canvasjs.com/ -->
	<script type="text/javascript" src="canvasjs.min.js"></script>
</head>

<body>

<div id="chartScope" style="height: 400px; width: 100%"></div>
<br />
<div style="width: 800px; margin-left: 100px">
	<div id="communication-diagnostics">
		<div style="width: 200px; display: inline-block">Roundtrip Time: <input type="text" id="roundtripTime" size="1" value="-" style="border: 0" />ms</div>
		<div style="width: 200px; display: inline-block">Message Count: <input type="text" id="messageCount" size="6" value="-" style="border: 0" /></div>
	</div>
	<div id="messages">
		<textarea id="messageWindow" rows="5" cols="100">Message here...</textarea>
	</div>
	<div id="message-diagnostics">
		<div style="width: 250px; display: inline-block">Message Size: <input type="text" id="messageSize" size="3" value="-" style="border: 0" />Bytes</div>
		<div style="width: 200px; display: inline-block">Throughput: <input type="text" id="throughput" size="3" value="-" style="border: 0" />kB/s</div>
	</div>
	<br />
	<div id="connection-status">
		<form onsubmit="return false;">
		<div id="connectForm" style="width: 400px; display: inline-block">Host: <input type="text" id="hostName" value="ws://hostName:81" style="width:160px;"/><input type="button" value="Connect" onclick="connect(hostName.value)" /><input type="button" value="Disconnect" onclick="disconnect()" /></div>
		</form>
		<textarea id="diagnosticWindow" rows="5" cols="100"></textarea>
	</div>
</div>

<script type="text/javascript">

// update IP address of ESP8266 module
document.getElementById('hostName').value = "ws://192.168.1.100:81";

var connection;
var messageCounter = 0;
var messageSendMilis;

var messageSize = document.getElementById('messageSize');
var connectForm = document.getElementById('connectForm');



// Chart configuration - Scope
var scopeSamples = [];   // primary Y axis
var chartScope = new CanvasJS.Chart("chartScope",
{
	title: {text: "ESP8266 Analog Input Monitor"},
	axisX: {title: "Sample Number"},
	axisY: {title: "A0 Counts"},
	data: [{type: "line", dataPoints : scopeSamples}]
});
chartScope.render();


function connect(host)
{
	if(connection)
	{
		diagnosticWindow.value = diagnosticWindow.value + "Already connected!" + "\n";
		return;
	}

	printDiag("Connecting...");
	connectForm.style.backgroundColor = 'LightYellow';
	connection = new WebSocket(host, ['arduino']);

	connection.onopen = function()
	{
		printDiag("Connected");
		connectForm.style.backgroundColor = 'GreenYellow';
		connection.send('Hallo from Browser :-) ' + new Date());
		sendMessage();
	};

	connection.onclose = function(event)
	{
		printDiag("Disconnected");
		connectForm.style.backgroundColor = 'LightPink';
		connection = null;
	};

	connection.onerror = function(error)
	{
		printDiag("Error " + error);
	};

	connection.onmessage = function(message)
	{
		var fileds = message.data.split(" ");

		// show message
		document.getElementById('messageWindow').value = message.data;
		messageSize.value = message.data.length;

		// check only messages begining with '#'
		if(fileds[0] == "#")
		{
			// check if received message number
			// is the same as that one sent
			if(fileds[1] !=  messageCounter)
			{
				// we have received back a message
				// with different number than just sent
				printDiag("Message missed");
				connection.close();
			}
			else
			{
				var rtt  = new Date().getTime() - messageSendMilis;
				document.getElementById('roundtripTime').value = rtt;
				// calculate throughput in kB/s
				// average roundtrip time in ms - multiply by 1000
				// kilo Bytes - divide by 1024
				var avgt = 0.9765 * parseInt(messageSize.value) / rtt;
				document.getElementById('throughput').value = avgt.toFixed(2);

				
				// send another message
				// this is assuming that processing below takes shorteer
				// than the time for this message to bounce back
				sendMessage();
				
				// update the scope chart
				// if there are are some data received
				var analogSamples = fileds[2].split(";");
				if(parseInt(analogSamples[0]) == -1)
				{
					// still waiting for the trigger
					// no data received
					// the scope chart will not be updated
				}
				else
				{
					// we have received new data
					// use the data to update the scope chart
					scopeSamples.length = 0;
					for(var i=0; i < analogSamples.length; i++)
					{
						scopeSamples.push({x: i, y: parseInt(analogSamples[i])});
					}
					chartScope.render();
				}
				
				// check where to execute sendMessage()
				// sendMessage();

			}
		}
	};
}

function disconnect()
{
	if(connection)
	{
		connection.close();
	}
	else
	{
		printDiag("Not connected!");
	}
}

function sendMessage()
{
	messageCounter++;
	document.getElementById('messageCount').value = messageCounter;
	messageSendMilis = new Date().getTime();
	//
	// Message format
	// # MESSAGE_NUMBER
	//
	connection.send("# " + messageCounter);
}

function printDiag(message)
{
	var diag = document.getElementById('diagnosticWindow');
	diag.value = diag.value + new Date().timeNow() + " " + message + "\n";
	diag.scrollTop = diag.scrollHeight;
}


Date.prototype.timeNow = function () {
     return ((this.getHours() < 10)?"0":"") + this.getHours() +":"+ ((this.getMinutes() < 10)?"0":"") + this.getMinutes() +":"+ ((this.getSeconds() < 10)?"0":"") + this.getSeconds();
}

</script>
</body>
</html>
